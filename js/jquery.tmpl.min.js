(function ($) {
       var domManip = $.fn.domManip,
           tmplItem = "_tmplitem",
           itemCache = {},
           renderCache = {},
           namedItems = { key: 0, data: {} },
           topTmplItem = 0,
           afterManip = 0,
           insideMan = [];
   
       function tmplItems(params, parentItem, tmpl, dataItem) {
           var ret = {
               data: dataItem || (parentItem ? parentItem.data : {}),
               _wrap: parentItem ? parentItem._wrap : null,
               tmpl: null,
               parent: parentItem || null,
               nodes: [],
               calls: calls,
               nest: nest,
               wrap: wrap,
               html: html,
               update: update
           };
           if (params) {
               $.extend(ret, params, { nodes: [], parent: parentItem });
           }
           if (tmpl) {
               ret.tmpl = tmpl;
               ret._ctnt = ret._ctnt || tmpl($.fn, ret);
               ret.key = ++topTmplItem;
               (insideMan.length ? renderCache : itemCache)[topTmplItem] = ret;
           }
           return ret;
       }
   
       $.fn.extend({
           tmpl: function (tmpl, data, options) {
               return $.tmpl(tmpl, data, options, this[0]);
           },
           tmplItem: function () {
               return $.tmplItem(this[0]);
           },
           template: function (name) {
               return $.template(name, this[0]);
           },
           domManip: function (args) {
               if (args[0] && args[0].nodeType) {
                   var nodes = $.makeArray(arguments),
                       parentItem = null,
                       tmplItem;
   
                   for (var i = 0, l = args.length; i < l; i++) {
                       var node = args[i];
                       if (node.nodeType === 1 && !(tmplItem = $.data(node, "tmplItem"))) {
                           while (node && node.nodeType === 1 && !(tmplItem = $.data(node.parentNode, "tmplItem"))) {
                               node = node.parentNode;
                           }
                           if (tmplItem && !tmplItem.nodes) {
                               tmplItem.nodes = [];
                           }
                           nodes[i] = $.tmplItem(node);
                           nodes[i].nodes.push(node);
                       }
                   }
                   domManip.apply(this, nodes);
               } else {
                   domManip.apply(this, arguments);
               }
               return this;
           }
       });
   
       $.extend({
           tmpl: function (tmpl, data, options, parentItem) {
               var ret;
               if (!tmpl) {
                   return [];
               }
               if (typeof data === "function") {
                   data = data.call(parentItem || {});
               }
               options = options || {};
               if (typeof tmpl === "string") {
                   tmpl = $.template(null, tmpl);
               }
               if (!tmpl) {
                   return [];
               }
               if (!tmpl._wrapped) {
                   tmpl = $.template(tmpl, parentItem);
               }
               if (tmpl) {
                   ret = tmpl($.fn, data, options, parentItem);
               }
               return ret ? $.makeArray(ret) : [];
           },
           tmplItem: function (elem) {
               var tmpl, data;
               if (elem instanceof $) {
                   elem = elem[0];
               }
               while (elem && elem.nodeType === 1 && !(tmpl = $.data(elem, "tmplItem"))) {
                   elem = elem.parentNode;
               }
               return tmpl || namedItems;
           },
           template: function (name, tmpl) {
               if (tmpl) {
                   if (typeof tmpl === "string") {
                       tmpl = buildTmplFn(tmpl);
                   } else if ($.isArray(tmpl)) {
                       tmpl = compileTemplate(tmpl);
                   }
                   $.template[name] = tmpl;
               }
               return name ? (typeof name !== "string" ? $.template(null, name) : ($.template[name] || $.template(null, name))) : null;
           }
       });
   
       function buildTmplFn(text) {
           return new Function("jQuery", "$item", "var $=jQuery,call,_=[],$data=$item.data;with($data){_.push('" + $.trim(text).replace(/([\\'])/g, "\\$1").replace(/[\r\t\n]/g, " ").replace(/\$\{([^\}]*)\}/g, "{{= $1}}").replace(/\{\{\/each\}\}/g, "');} } _.push('").replace(/\{\{each\s+([^}]*)\}\}/g, "');if($notnull_1){$.each($1,function($i,$item){with($item){").split("{{=").join("');_.push($.encode(").split("{{").join("');").split("}}").join("_.push('").split("'").join("\\'") + "');} } _.push('');return _;");
       }
   
       function compileTemplate(tmpl) {
           var fn = $.map(tmpl, buildTmplFn).join("");
           return new Function("jQuery", "$item", "var $=jQuery,call,_=[],$data=$item.data;with($data){_.push('" + fn + "');} return _;");
       }
   })(jQuery);
   